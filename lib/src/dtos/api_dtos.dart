// This file is auto-generated from the DTOs in MemoryPuzzleApi.
// Do not edit this file directly, changes will be overwritten.
class FileGroupDto {
  final String groupName;
  final int imageCount;

  FileGroupDto({
    required this.groupName,
    required this.imageCount,
  });

  factory FileGroupDto.fromJson(Map<String, dynamic> json) => FileGroupDto(
    groupName: json['groupName'] ?? '',
    imageCount: json['imageCount'] ?? 0,
  );

  Map<String, dynamic> toJson() => {
    'groupName': groupName,
    'imageCount': imageCount,
  };
}

class LoginDto {
  String username;
  String password;

  LoginDto({
    required this.username,
    required this.password,
  });

  factory LoginDto.fromJson(Map<String, dynamic> json) => LoginDto(
    username: json['username'] ?? '',
    password: json['password'] ?? '',
  );

  Map<String, dynamic> toJson() => {
    'username': username,
    'password': password,
  };
}

class PuzzleAdminDto {
  final int id;
  final String name;
  final String creator;
  final DateTime creationTime;
  final int imageCount;
  bool isPublic;

  PuzzleAdminDto({
    required this.id,
    required this.name,
    required this.creator,
    required this.creationTime,
    required this.imageCount,
    required this.isPublic,
  });

  factory PuzzleAdminDto.fromJson(Map<String, dynamic> json) => PuzzleAdminDto(
    id: json['id'] ?? 0,
    name: json['name'] ?? '',
    creator: json['creator'] ?? '',
    creationTime: DateTime.parse(json['creationTime']),
    imageCount: json['imageCount'] ?? 0,
    isPublic: json['isPublic'] ?? false,
  );

  Map<String, dynamic> toJson() => {
    'id': id,
    'name': name,
    'creator': creator,
    'creationTime': creationTime,
    'imageCount': imageCount,
    'isPublic': isPublic,
  };
}

class PuzzleDtoBase {
  String name;
  List<PuzzleImageDto> images;

  PuzzleDtoBase({
    required this.name,
    required this.images,
  });

  factory PuzzleDtoBase.fromJson(Map<String, dynamic> json) => PuzzleDtoBase(
    name: json['name'] ?? '',
    images: (json['images'] as List<dynamic>?)?.map((e) => PuzzleImageDto.fromJson(e as Map<String, dynamic>)).toList() ?? [],
  );

  Map<String, dynamic> toJson() => {
    'name': name,
    'images': images,
  };
}

class PuzzleDto {
  int id;
  DateTime creationTime;
  String author;
  String authorRole;
  bool isPublic;
  String name;
  List<PuzzleImageDto> images;

  PuzzleDto({
    required this.id,
    required this.creationTime,
    required this.author,
    required this.authorRole,
    required this.isPublic,
    required this.name,
    required this.images,
  });

  factory PuzzleDto.fromJson(Map<String, dynamic> json) => PuzzleDto(
    id: json['id'] ?? 0,
    creationTime: DateTime.parse(json['creationTime']),
    author: json['author'] ?? '',
    authorRole: json['authorRole'] ?? '',
    isPublic: json['isPublic'] ?? false,
    name: json['name'] ?? '',
    images: (json['images'] as List<dynamic>?)?.map((e) => PuzzleImageDto.fromJson(e as Map<String, dynamic>)).toList() ?? [],
  );

  Map<String, dynamic> toJson() => {
    'id': id,
    'creationTime': creationTime,
    'author': author,
    'authorRole': authorRole,
    'isPublic': isPublic,
    'name': name,
    'images': images,
  };
}

class PuzzleImageDto {
  String imageUid;

  PuzzleImageDto({
    required this.imageUid,
  });

  factory PuzzleImageDto.fromJson(Map<String, dynamic> json) => PuzzleImageDto(
    imageUid: json['imageUid'] ?? '',
  );

  Map<String, dynamic> toJson() => {
    'imageUid': imageUid,
  };
}

class PuzzleLogDto {
  int puzzleId;
  String user;
  DateTime startTime;
  DateTime endTime;
  String mode;
  String comment;

  PuzzleLogDto({
    required this.puzzleId,
    required this.user,
    required this.startTime,
    required this.endTime,
    required this.mode,
    required this.comment,
  });

  factory PuzzleLogDto.fromJson(Map<String, dynamic> json) => PuzzleLogDto(
    puzzleId: json['puzzleId'] ?? 0,
    user: json['user'] ?? '',
    startTime: DateTime.parse(json['startTime']),
    endTime: DateTime.parse(json['endTime']),
    mode: json['mode'] ?? '',
    comment: json['comment'] ?? '',
  );

  Map<String, dynamic> toJson() => {
    'puzzleId': puzzleId,
    'user': user,
    'startTime': startTime.toIso8601String(),
    'endTime': endTime.toIso8601String(),
    'mode': mode,
    'comment': comment,
  };
}

class ServiceDto {
  String serviceType;
  String implementationType;
  String lifetime;

  ServiceDto({
    required this.serviceType,
    required this.implementationType,
    required this.lifetime,
  });

  factory ServiceDto.fromJson(Map<String, dynamic> json) => ServiceDto(
    serviceType: json['serviceType'] ?? '',
    implementationType: json['implementationType'] ?? '',
    lifetime: json['lifetime'] ?? '',
  );

  Map<String, dynamic> toJson() => {
    'serviceType': serviceType,
    'implementationType': implementationType,
    'lifetime': lifetime,
  };
}

class ServiceListProvider {
  List<ServiceDto> services;

  ServiceListProvider({
    required this.services,
  });

  factory ServiceListProvider.fromJson(Map<String, dynamic> json) => ServiceListProvider(
    services: (json['services'] as List<dynamic>?)?.map((e) => ServiceDto.fromJson(e as Map<String, dynamic>)).toList() ?? [],
  );

  Map<String, dynamic> toJson() => {
    'services': services,
  };
}

class SystemInfoDto {
  String databaseProvider;
  String databaseConnectionString;
  String efCoreVersion;
  String aspNetVersion;
  String serverIp;
  String clientIp;
  DateTime serverTime;

  SystemInfoDto({
    required this.databaseProvider,
    required this.databaseConnectionString,
    required this.efCoreVersion,
    required this.aspNetVersion,
    required this.serverIp,
    required this.clientIp,
    required this.serverTime,
  });

  factory SystemInfoDto.fromJson(Map<String, dynamic> json) => SystemInfoDto(
    databaseProvider: json['databaseProvider'] ?? '',
    databaseConnectionString: json['databaseConnectionString'] ?? '',
    efCoreVersion: json['efCoreVersion'] ?? '',
    aspNetVersion: json['aspNetVersion'] ?? '',
    serverIp: json['serverIp'] ?? '',
    clientIp: json['clientIp'] ?? '',
    serverTime: DateTime.parse(json['serverTime']),
  );

  Map<String, dynamic> toJson() => {
    'databaseProvider': databaseProvider,
    'databaseConnectionString': databaseConnectionString,
    'efCoreVersion': efCoreVersion,
    'aspNetVersion': aspNetVersion,
    'serverIp': serverIp,
    'clientIp': clientIp,
    'serverTime': serverTime,
  };
}

class UserAdminDto {
  String username;
  List<String> roles;
  DateTime? lastLogin;
  int puzzleCount;

  UserAdminDto({
    required this.username,
    required this.roles,
    this.lastLogin,
    required this.puzzleCount,
  });

  factory UserAdminDto.fromJson(Map<String, dynamic> json) => UserAdminDto(
    username: json['username'] ?? '',
    roles: (json['roles'] as List<dynamic>?)?.map((e) => e as String).toList() ?? [],
    lastLogin: json['lastLogin'] != null ? DateTime.parse(json['lastLogin']) : null,
    puzzleCount: json['puzzleCount'] ?? 0,
  );

  Map<String, dynamic> toJson() => {
    'username': username,
    'roles': roles,
    'lastLogin': lastLogin,
    'puzzleCount': puzzleCount,
  };
}

